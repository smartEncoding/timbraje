<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Comprobantes_timbraje extends CI_Controller{
    var $codigo_usuario;
    var $dias=array(31,28,31,30,31,30,31,31,30,31,30,31);
    function __construct()
    {
        parent::__construct();
        $this->load->model('Comprobantes_timbraje_model');
        $this->load->model('Empresa_model');
        $this->load->model('Usuario_model');
        
        $this->codigo_usuario=1;
    } 

    /*
     * Listing of comprobantes_timbraje
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('comprobantes_timbraje/index?');
        $config['total_rows'] = $this->Comprobantes_timbraje_model->get_all_comprobantes_timbraje_count();
        $this->pagination->initialize($config);
        $listado=$this->Comprobantes_timbraje_model->get_all_comprobantes_timbraje($params);
        //var_dump($listado);
        $borrar=$this->Usuario_model->puede_borrar_timbraje($this->codigo_usuario);
        $editar=$this->Usuario_model->puede_modificar_timbraje($this->codigo_usuario);
        foreach ($listado as $key => $value) 
        {
            $dato["id"]=$value['id'];
            $dato["fecha"]=$value['fecha'];
            $dato["id_usuario"]=$value['id_usuario'];
            $dato["id_empresa"]=$value['id_empresa'];
            $dato["numero"]=$value['numero'];
            $dato["empresa"]=$this->Empresa_model->get_empresa($value['id_empresa'])['razon_social'];

            $dato["edit"]=$editar ? "<a href=".site_url('comprobantes_timbraje/edit/').$value["id"]." class='btn btn-info btn-xs'><span class='fa fa-pencil'></span> Edita</a> " : "";
            $dato["delete"]=isset($borrar) ? "<a href=".site_url('comprobantes_timbraje/remove/').$value["id"]." class='btn btn-danger btn-xs'><span class='fa fa-trash'></span> Borra</a> " : "";
            $salida[]=$dato;
        }

        $data['comprobantes_timbraje'] = $salida;
        
        $data['_view'] = 'comprobantes_timbraje/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new comprobantes_timbraje
     */
    function add()
    {   
        $this->load->library('form_validation');

        $this->form_validation->set_rules('fecha','Fecha','required');
        $this->form_validation->set_rules('id_usuario','Id Usuario','required');
        $this->form_validation->set_rules('id_empresa','Id Empresa','required');
        $this->form_validation->set_rules('numero','Numero','required|integer|is_unique[comprobantes_timbraje.numero]');
        //var_dump($this->form_validation);

        /*
        if($this->form_validation->run())     
        {   
            $params = array(
                'id_empresa' => $this->input->post('id_empresa'),
                'id_usuario' => $this->input->post('id_usuario'),
                'numero' => $this->input->post('numero'),
                'fecha' => $this->input->post('fecha'),
            );
            
            $comprobantes_timbraje_id = $this->Comprobantes_timbraje_model->add_comprobantes_timbraje($params);
            redirect('comprobantes_timbraje/index');
        }
        else
        */
        {
            $this->load->model('Empresa_model');
            $data['all_empresas'] = $this->Empresa_model->get_all_empresas();

            $this->load->model('Usuario_model');
            $data['all_usuarios'] = $this->Usuario_model->get_all_usuarios();
            
            $this->load->model('Tipos_libro_model');
            $data['all_tipos_libros'] = $this->Tipos_libro_model->get_all_tipos_libros();
            
            $data['_view'] = 'comprobantes_timbraje/add';
            $js = array('assets/modules/datatables/datatables.min.js',
                        'assets/modules/datatables/dataTables.editor.min.js',
                        'assets/js/jquery.Rut.min.js',
                        'assets/js/page/Documentar/factura.js',
                        "assets/modules/izitoast/js/iziToast.min.js",
                        );

            $data['js'] = array('resources/js/modules/timbraje.js',
                        'resources/modules/datatables/datatables.min.js',
                        'resources/modules/datatables/dataTables.editor.min.js',
                        "resources/modules/izitoast/js/iziToast.js",
                        );

            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a comprobantes_timbraje
     */
    function edit($id)
    {   
        $editar=$this->Usuario_model->puede_modificar_timbraje($this->codigo_usuario);
        if ($editar!=1)
            {
                show_error('No tiene acceso a EDITAR comprobantes');
                redirect('comprobantes_timbraje/index');
            }

        // check if the comprobantes_timbraje exists before trying to edit it
        $data['comprobantes_timbraje'] = $this->Comprobantes_timbraje_model->get_comprobantes_timbraje($id);
        
        if(isset($data['comprobantes_timbraje']['id']))
        {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('fecha','Fecha','required');
            $this->form_validation->set_rules('id_usuario','Id Usuario','required');
            $this->form_validation->set_rules('id_empresa','Id Empresa','required');
            $this->form_validation->set_rules('numero','Numero','required|integer');
        
            if($this->form_validation->run())     
            {   
                $params = array(
                    'id_empresa' => $this->input->post('id_empresa'),
                    'id_usuario' => $this->input->post('id_usuario'),
                    'numero' => $this->input->post('numero'),
                    'fecha' => $this->input->post('fecha'),
                );

                $this->Comprobantes_timbraje_model->update_comprobantes_timbraje($id,$params);            
                redirect('comprobantes_timbraje/index');
            }
            else
            {
                $this->load->model('Empresa_model');
                $data['all_empresas'] = $this->Empresa_model->get_all_empresas();

                $this->load->model('Usuario_model');
                $data['all_usuarios'] = $this->Usuario_model->get_all_usuarios();

                $data['_view'] = 'comprobantes_timbraje/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The comprobantes_timbraje you are trying to edit does not exist.');
    } 

    /*
     * Deleting comprobantes_timbraje
     */
    function remove($id)
    {
        $borrar=$this->Usuario_model->puede_borrar_timbraje($this->codigo_usuario);
        if ($borrar!=1)
            {
            show_error('No tiene acceso a BORRAR comprobantes');
            redirect('comprobantes_timbraje/index');
            }
        $comprobantes_timbraje = $this->Comprobantes_timbraje_model->get_comprobantes_timbraje($id);

        // check if the comprobantes_timbraje exists before trying to delete it
        if(isset($comprobantes_timbraje['id']))
        {
            $this->Comprobantes_timbraje_model->delete_comprobantes_timbraje($id);
            redirect('comprobantes_timbraje/index');
        }
        else
            show_error('The comprobantes_timbraje you are trying to delete does not exist.');
    }

    /*
      Verificacion de datos ingresado para 1 linea de comprobante
      ------------------------------------------------------------
      que no existe numero inicial - final en rango anterior para rut determindo
      que no exista libro ya impreso con ese periodo
     */
    function verifica()
    {
        $receptor = $this->input->post('receptor');
        //var_dump($receptor);
        $linea= $this->input->post('productos');
        //var_dump($linea);
        $id_empresa=$receptor['empresa'];
        $desde = $linea[0]['desde'];
        $hasta = $linea[0]['hasta'];
        
        $periodo_desde=$array = explode("/",'01/'.$linea[0]['mes_d'], 3);
        $periodo_h=$array = explode("/",$linea[0]['mes_h'], 2);
        echo $this->dias[$periodo_h[0]-1];
        $periodo_hasta=mktime(0,0,0,$this->dias[$periodo_h[0]],$periodo_h[0],$periodo_h[1]);
        var_dump($periodo_h);
        echo(date('Y/m/d',$periodo_hasta));
        $mes_d = $linea[0]['mes_d'];
        $periodo_h = $linea[0]['mes_h'];
        $tipo_libro = $linea[0]['id_libro'];
        $valida=array();
        $valida['error']['estado']=0;
        $valida['error']['title']='Correcto';
        $valida['error']['message']='Sin Error';
        if ($id_empresa)
        {
            $Result1=null;
            $Result2=null;
            $Result3=null;
            if ($desde)
                $Result1=$this->Comprobantes_timbraje_model->verifica_rango_desde($id_empresa,$desde);
            if ($hasta)
                $Result2=$this->Comprobantes_timbraje_model->verifica_rango_hasta($id_empresa,$hasta);
            if($tipo_libro)
                if($mes)
                    if($anio) 
                        $Result3=$this->Comprobantes_timbraje_model->verifica_tipo_periodo($id_empresa,$tipo_libro,$periodo_d);
                    else
                        {
                            $valida['error']['estado']=1;
                            $valida['error']['title']='Error';
                            $valida['error']['message']='Debe especificar AÃ±o)!';
                            $valida['error']['color']='red';

                        }
                else
                    {
                        $valida['error']['estado']=1;
                        $valida['error']['title']='Error';
                        $valida['error']['message']='Debe especificar MES)!';
                        $valida['error']['color']='red';

                    }
            else
                {
                    $valida['error']['estado']=1;
                    $valida['error']['title']='Error';
                    $valida['error']['message']='Debe especificar Tipo De libro)!';
                    $valida['error']['color']='red';
                }

            if ($Result1) 
            {
                $valida['error']['estado']=1;
                $valida['error']['title']='Error';
                $valida['error']['message']='Rango Desde ya existe!';
                $valida['error']['color']='red';
                //var_dump($Result1);
            }
            if ($Result2)
            {
                $valida['error']['estado']=1;
                $valida['error']['title']='Error';
                $valida['error']['message']='Rango hasta ya existe!';
                $valida['error']['color']='red';
                //var_dump($Result2);
            }
            if ($Result3)
            {
                $valida['error']['estado']=1;
                $valida['error']['title']='Error';
                $valida['error']['message']='Tipo Libro ya existe para ese periodo (mes, AÃ±o)!';
                $valida['error']['color']='red';
                //var_dump($Result3);
            }
        }
        else
        {
            $result1=null;
            $valida=array();
            $valida['error']['estado']=1;
            $valida['error']['title']='ERROR';
            $valida['error']['message']='No ha seleccionado Empresa';
            $valida['error']['color']='red';
        }

        $salida['validaciones']=$valida;
        $salida['success']=$salida['validaciones']['error']['estado']==0 ? true : false;
        echo json_encode($salida);
    }
    function  guardar_comprobante()
    {
        //$validar=json_decode($this->verifica());
        //var_dump($validar);
        $receptor=$this->input->post('receptor');
        $productos=$this->input->post('productos');
        //var_dump($productos);
        if ($productos==null or $receptor==null)
            {
                $valida=array();
                $valida['error']['estado']=1;
                $valida['error']['title']='ERROR';
                $valida['error']['message']='No existen datos para Guardar';
                $valida['error']['color']='red';
                
                $salida['validaciones']=$valida;
                $salida['success']=$salida['validaciones']['error']['estado']==0 ? true : false;
                echo json_encode($salida);
                exit;
            }            
        //var_dump($receptor);
        $form_data=array('fecha'=>$receptor['fecha'],'id_empresa'=>$receptor['empresa'],'numero'=>$receptor['numero']);
        $this->load->library('form_validation');
        $this->form_validation->set_data($form_data);
        $this->form_validation->set_rules('fecha','Fecha','required');
        $this->form_validation->set_rules('id_empresa','Id Empresa','required');
        $this->form_validation->set_rules('numero','Numero','required|integer|is_unique[comprobantes_timbraje.numero]');
        //var_dump($this->form_validation);

        if($this->form_validation->run())     
        {   
            $this->load->model('Timbraje_model');
            //var_dump($productos);
            $params = array(
                    'id_empresa' => $receptor['empresa'],
                    'id_usuario' => $receptor['usuario'],
                    'numero' => $receptor['numero'],
                    'fecha' => $receptor['fecha'],
                );
            //$comprobantes_timbraje_id =1;
            $comprobantes_timbraje_id = $this->Comprobantes_timbraje_model->add_comprobantes_timbraje($params);

            if ($comprobantes_timbraje_id !=null)
            {
                foreach ($productos as $key => $value) 
                    {
                        $params = array(
                            'nulo' => $value[7],
                            'id_tipo_libro' => $value[5],
                            'id_cliente' => $receptor['empresa'],
                            'desde' => $value[3],
                            'hasta' => $value[4],
                            'mes' => $value[1],
                            'anio' => $value[2],
                            'id_comprobante' => $comprobantes_timbraje_id,
                        );
                        
                        $timbraje_id = $this->Timbraje_model->add_timbraje($params);
                    }
            }
            else
                {
                    $valida=array();
                    $valida['error']['estado']=1;
                    $valida['error']['title']='ERROR';
                    $valida['error']['message']='Problermas al Generar nuevo ID  del Comprobante';
                    $valida['error']['color']='red';
                    
                    $salida['validaciones']=$valida;
                    $salida['success']= false;
                    echo json_encode($salida);
                }
        }
        else
        {
                $valida=array();
                $valida['error']['estado']=1;
                $valida['error']['title']='ERROR';
                $valida['error']['message']=validation_errors();
                $valida['error']['color']='red';
                
                $salida['validaciones']=$valida;
                $salida['success']= false;
                echo json_encode($salida);
        }

    }

}