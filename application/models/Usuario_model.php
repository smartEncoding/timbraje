<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Usuario_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }
    
    /*
     * Get usuario by id
     */
    function get_usuario($id)
    {
        return $this->db->get_where('usuarios',array('id'=>$id))->row_array();
    }
    
    /*
     * Get all usuarios count
     */
    function get_all_usuarios_count()
    {
        $this->db->from('usuarios');
        return $this->db->count_all_results();
    }
        
    /*
     * Get all usuarios
     */
    function get_all_usuarios($params = array())
    {
        $this->db->order_by('id', 'desc');
        if(isset($params) && !empty($params))
        {
            $this->db->limit($params['limit'], $params['offset']);
        }
        return $this->db->get('usuarios')->result_array();
    }
        
    /*
     * function to add new usuario
     */
    function add_usuario($params)
    {
        $params['id']=$this->get_unused_id();
        $this->db->insert('usuarios',$params);
        return $this->db->insert_id();
    }
    
    /*
     * function to update usuario
     */
    function update_usuario($id,$params)
    {
        $this->db->where('id',$id);
        return $this->db->update('usuarios',$params);
    }
    
    /*
     * function to delete usuario
     */
    function delete_usuario($id)
    {
        return $this->db->delete('usuarios',array('id'=>$id));
    }

    function puede_borrar_timbraje($id)
    {
        $datos=$this->get_usuario($id);
        if (isset($datos['id']))
        {
            return $datos['kn_borrar_timbraje'];
        }
        else
            return false;
    }

    function puede_modificar_timbraje($id)
    {
        $datos=$this->get_usuario($id);
        if (isset($datos['id']))
        {
            return $datos['kn_edit_timbraje'];
        }
            return false;
    }
    function obtener_permisos($id)
    {
        $usuario['compr_listar']=0;
        $usuario['compr_editar']=1;
        $usuario['compr_add']=0;
        $usuario['compr_borrar']=1;
        $usuario['empr_listar']=1;
        $usuario['empr_editar']=1;
        $usuario['empr_add']=1;
        $usuario['empr_borrar']=1;
        $usuario['libro_listar']=1;
        $usuario['libro_editar']=1;
        $usuario['libro_add']=1;
        $usuario['libro_borrar']=1;
        $usuario['user_listar']=1;
        $usuario['user_editar']=1;
        $usuario['user_add']=1;
        $usuario['user_borrar']=1;
        return $usuario;
    }

// --------------------------------------------------------------

    /**
     * Get an unused ID for user creation
     *
     * @return  int between 1200 and 4294967295
     */
    public function get_unused_id()
    {
        // Create a random user id between 1200 and 4294967295
        $random_unique_int = 2147483648 + mt_rand( -2147482448, 2147483647 );

        // Make sure the random user_id isn't already in use
        $query = $this->db->where( 'id', $random_unique_int )
            ->get_where( 'usuarios' );

        if( $query->num_rows() > 0 )
        {
            $query->free_result();

            // If the random user_id is already in use, try again
            return $this->get_unused_id();
        }

        return $random_unique_int;
    }

}
